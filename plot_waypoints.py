#!/usr/bin/env python

# Copyright (c) 2019 Computer Vision Center (CVC) at the Universitat Autonoma de
# Barcelona (UAB).
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.

import glob
import os
import sys

try:
    sys.path.append(glob.glob('./PythonAPI/carla/dist/carla-*%d.%d-%s.egg' % (
        sys.version_info.major,
        sys.version_info.minor,
        'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
except IndexError:
    pass

import carla
import matplotlib.pyplot as plt

import random
import time


def main():
    actor_list = []

    # In this tutorial script, we are going to add a vehicle to the simulation
    # and let it drive in autopilot. We will also create a camera attached to
    # that vehicle, and save all the images generated by the camera to disk.

    try:
        # First of all, we need to create the client that will send the requests
        # to the simulator. Here we'll assume the simulator is accepting
        # requests in the localhost at port 2000.
        # Connect to CARLA server
        client = carla.Client('localhost', 2000)
        client.set_timeout(20.0)
        world = client.get_world()

        # Get the CARLA map
        carla_map = world.get_map()

        # Generate all waypoints
        all_waypoints = carla_map.generate_waypoints(distance=1.0)

        # Extract x and y coordinates of waypoints
        x_waypoints = [waypoint.transform.location.x for waypoint in all_waypoints]
        y_waypoints = [waypoint.transform.location.y for waypoint in all_waypoints]
        print(max(x_waypoints)-min(x_waypoints), max(y_waypoints)-min(y_waypoints))
        # Get spawn points
        spawn_points = carla_map.get_spawn_points()

        # Extract x and y coordinates of spawn points
        x_spawn = [point.location.x for point in spawn_points]
        y_spawn = [point.location.y for point in spawn_points]
        start_waypoint = carla_map.get_waypoint(spawn_points[1].location)
        path = [start_waypoint]
        distance_traveled = 0.0
        while distance_traveled < 2000:  # 5 km
            next_waypoints = path[-1].next(1.0)  # 10 meters ahead
            if not next_waypoints:
                break
            path.append(next_waypoints[0])
            distance_traveled += 1.0
        # Plot using matplotlib
        
        # Extract x and y coordinates of the path
        x_path = [waypoint.transform.location.x for waypoint in path]
        y_path = [waypoint.transform.location.y for waypoint in path]
        print(len(x_path))
        # print x_path and y_path from second point to file "racetrack_waypoints.txt" , third column is always speed that linerly increase from 1 to 30 for first 100 points, 
        # then 30 for 1800 points, then 30 to 0 for last 100 points , sepatated by comma
        f = open("racetrack_waypoints.txt", "w")
        for i in range(1,len(x_path)):
            if i < 100:
                f.write(str(x_path[i]) + "," + str(y_path[i]) + "," + str((i+10)/110*20) + "\n")
            elif i < 1900:
                f.write(str(x_path[i]) + "," + str(y_path[i]) + "," + str(20) + "\n")
            else:
                f.write(str(x_path[i]) + "," + str(y_path[i]) + "," + str((2000-i)/100*20) + "\n")
        
        plt.figure(figsize=(12, 12))

        # Plot waypoints
        plt.scatter(x_waypoints, y_waypoints, s=1, c='blue', label='Waypoints')

        # Plot spawn points
        plt.scatter(x_spawn, y_spawn, s=10, c='red', marker='x', label='Spawn Points')

        # Plot spawn points
        plt.scatter(x_path, y_path, s=10, c='green', marker='8', label='Path Points')

        # Annotate each spawn point with its number
        for i, (x, y) in enumerate(zip(x_spawn, y_spawn)):
            plt.annotate(str(i), (x, y), fontsize=8, ha='right')

        plt.title('Waypoints and Spawn Points in CARLA')
        plt.xlabel('X Coordinate')
        plt.ylabel('Y Coordinate')
        plt.legend()
        plt.grid(True)
        plt.show()



    finally:

        #client.apply_batch([carla.command.DestroyActor(x) for x in actor_list])
        print('done.')


if __name__ == '__main__':

    main()
